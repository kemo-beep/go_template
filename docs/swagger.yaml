basePath: /api/v1
definitions:
  admin.AddColumnRequest:
    properties:
      column:
        $ref: '#/definitions/admin.ColumnRequest'
    required:
    - column
    type: object
  admin.AssignPermissionsRequest:
    properties:
      permission_ids:
        items:
          type: integer
        type: array
    required:
    - permission_ids
    type: object
  admin.AssignRoleRequest:
    properties:
      role_id:
        type: integer
    required:
    - role_id
    type: object
  admin.ColumnRequest:
    properties:
      default_value:
        type: string
      length:
        description: For varchar(length)
        type: integer
      name:
        type: string
      not_null:
        type: boolean
      primary_key:
        type: boolean
      references:
        description: 'For foreign keys: "table_name(column)"'
        type: string
      type:
        description: varchar, integer, boolean, timestamp, text, jsonb, etc.
        type: string
      unique:
        type: boolean
    required:
    - name
    - type
    type: object
  admin.CreateRoleRequest:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  admin.CreateTableRequest:
    properties:
      columns:
        items:
          $ref: '#/definitions/admin.ColumnRequest'
        minItems: 1
        type: array
      table_name:
        type: string
    required:
    - columns
    - table_name
    type: object
  admin.ExecuteQueryRequest:
    properties:
      query:
        type: string
    required:
    - query
    type: object
  admin.RenameTableRequest:
    properties:
      new_name:
        type: string
    required:
    - new_name
    type: object
  admin.UpdateUserRequest:
    properties:
      is_active:
        type: boolean
      is_admin:
        type: boolean
      name:
        type: string
    type: object
  api_keys.ApikeysCreateRequest:
    properties:
      expires_at:
        type: string
      is_active:
        type: boolean
      key_hash:
        maxLength: 255
        type: string
      last_used_at:
        type: string
      name:
        maxLength: 100
        type: string
      prefix:
        maxLength: 20
        type: string
      rate_limit:
        type: integer
      scopes:
        type: string
      user_id:
        type: integer
    required:
    - key_hash
    - name
    - prefix
    type: object
  api_keys.ApikeysResponse:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      key_hash:
        type: string
      last_used_at:
        type: string
      name:
        type: string
      prefix:
        type: string
      rate_limit:
        type: integer
      scopes:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  api_keys.ApikeysUpdateRequest:
    properties:
      expires_at:
        type: string
      is_active:
        type: boolean
      key_hash:
        maxLength: 255
        type: string
      last_used_at:
        type: string
      name:
        maxLength: 100
        type: string
      prefix:
        maxLength: 20
        type: string
      rate_limit:
        type: integer
      scopes:
        type: string
      user_id:
        type: integer
    type: object
  api_keys.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  api_keys.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/api_keys.ApikeysResponse'
        type: array
      pagination:
        $ref: '#/definitions/api_keys.PaginationInfo'
    type: object
  auth.AuthResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/auth.UserData'
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  auth.RegisterRequest:
    properties:
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  auth.UserData:
    properties:
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      is_admin:
        type: boolean
      name:
        type: string
    type: object
  email_verification_tokens.EmailverificationtokensCreateRequest:
    properties:
      email:
        maxLength: 255
        type: string
      expires_at:
        type: string
      token:
        maxLength: 255
        type: string
      used:
        type: boolean
      used_at:
        type: string
      user_id:
        type: integer
    required:
    - email
    - expires_at
    - token
    - user_id
    type: object
  email_verification_tokens.EmailverificationtokensResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      token:
        type: string
      used:
        type: boolean
      used_at:
        type: string
      user_id:
        type: integer
    type: object
  email_verification_tokens.EmailverificationtokensUpdateRequest:
    properties:
      email:
        maxLength: 255
        type: string
      expires_at:
        type: string
      token:
        maxLength: 255
        type: string
      used:
        type: boolean
      used_at:
        type: string
      user_id:
        type: integer
    type: object
  email_verification_tokens.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  email_verification_tokens.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/email_verification_tokens.EmailverificationtokensResponse'
        type: array
      pagination:
        $ref: '#/definitions/email_verification_tokens.PaginationInfo'
    type: object
  files.FilesCreateRequest:
    properties:
      deleted_at:
        type: string
      file_name:
        type: string
      file_size:
        type: integer
      file_type:
        type: string
      is_public:
        type: boolean
      r2_key:
        type: string
      r2_url:
        type: string
      user_id:
        type: integer
    required:
    - file_name
    - file_size
    - file_type
    - r2_key
    - r2_url
    - user_id
    type: object
  files.FilesResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      file_name:
        type: string
      file_size:
        type: integer
      file_type:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      r2_key:
        type: string
      r2_url:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  files.FilesUpdateRequest:
    properties:
      deleted_at:
        type: string
      file_name:
        type: string
      file_size:
        type: integer
      file_type:
        type: string
      is_public:
        type: boolean
      r2_key:
        type: string
      r2_url:
        type: string
      user_id:
        type: integer
    type: object
  files.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  files.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/files.FilesResponse'
        type: array
      pagination:
        $ref: '#/definitions/files.PaginationInfo'
    type: object
  oauth_providers.OauthprovidersCreateRequest:
    properties:
      access_token:
        type: string
      profile_data:
        type: string
      provider:
        maxLength: 50
        type: string
      provider_user_id:
        maxLength: 255
        type: string
      refresh_token:
        type: string
      token_expires_at:
        type: string
      user_id:
        type: integer
    required:
    - provider
    - provider_user_id
    - user_id
    type: object
  oauth_providers.OauthprovidersResponse:
    properties:
      access_token:
        type: string
      created_at:
        type: string
      id:
        type: integer
      profile_data:
        type: string
      provider:
        type: string
      provider_user_id:
        type: string
      refresh_token:
        type: string
      token_expires_at:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  oauth_providers.OauthprovidersUpdateRequest:
    properties:
      access_token:
        type: string
      profile_data:
        type: string
      provider:
        maxLength: 50
        type: string
      provider_user_id:
        maxLength: 255
        type: string
      refresh_token:
        type: string
      token_expires_at:
        type: string
      user_id:
        type: integer
    type: object
  oauth_providers.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  oauth_providers.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/oauth_providers.OauthprovidersResponse'
        type: array
      pagination:
        $ref: '#/definitions/oauth_providers.PaginationInfo'
    type: object
  password_reset_tokens.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  password_reset_tokens.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/password_reset_tokens.PasswordresettokensResponse'
        type: array
      pagination:
        $ref: '#/definitions/password_reset_tokens.PaginationInfo'
    type: object
  password_reset_tokens.PasswordresettokensCreateRequest:
    properties:
      expires_at:
        type: string
      token:
        maxLength: 255
        type: string
      used:
        type: boolean
      used_at:
        type: string
      user_id:
        type: integer
    required:
    - expires_at
    - token
    - user_id
    type: object
  password_reset_tokens.PasswordresettokensResponse:
    properties:
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      token:
        type: string
      used:
        type: boolean
      used_at:
        type: string
      user_id:
        type: integer
    type: object
  password_reset_tokens.PasswordresettokensUpdateRequest:
    properties:
      expires_at:
        type: string
      token:
        maxLength: 255
        type: string
      used:
        type: boolean
      used_at:
        type: string
      user_id:
        type: integer
    type: object
  permissions.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  permissions.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/permissions.PermissionsResponse'
        type: array
      pagination:
        $ref: '#/definitions/permissions.PaginationInfo'
    type: object
  permissions.PermissionsCreateRequest:
    properties:
      action:
        maxLength: 50
        type: string
      description:
        type: string
      name:
        maxLength: 100
        type: string
      resource:
        maxLength: 100
        type: string
    required:
    - action
    - name
    - resource
    type: object
  permissions.PermissionsResponse:
    properties:
      action:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      resource:
        type: string
      updated_at:
        type: string
    type: object
  permissions.PermissionsUpdateRequest:
    properties:
      action:
        maxLength: 50
        type: string
      description:
        type: string
      name:
        maxLength: 100
        type: string
      resource:
        maxLength: 100
        type: string
    type: object
  realtime.BroadcastRequest:
    properties:
      channel:
        type: string
      event:
        type: string
      payload:
        additionalProperties: true
        type: object
    required:
    - event
    type: object
  refresh_tokens.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  refresh_tokens.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/refresh_tokens.RefreshtokensResponse'
        type: array
      pagination:
        $ref: '#/definitions/refresh_tokens.PaginationInfo'
    type: object
  refresh_tokens.RefreshtokensCreateRequest:
    properties:
      deleted_at:
        type: string
      expires_at:
        type: string
      is_revoked:
        type: boolean
      token:
        type: string
      user_id:
        type: integer
    required:
    - expires_at
    - token
    - user_id
    type: object
  refresh_tokens.RefreshtokensResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      is_revoked:
        type: boolean
      token:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  refresh_tokens.RefreshtokensUpdateRequest:
    properties:
      deleted_at:
        type: string
      expires_at:
        type: string
      is_revoked:
        type: boolean
      token:
        type: string
      user_id:
        type: integer
    type: object
  role_permissions.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  role_permissions.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/role_permissions.RolepermissionsResponse'
        type: array
      pagination:
        $ref: '#/definitions/role_permissions.PaginationInfo'
    type: object
  role_permissions.RolepermissionsCreateRequest:
    properties:
      permission_id:
        type: integer
      role_id:
        type: integer
    required:
    - permission_id
    - role_id
    type: object
  role_permissions.RolepermissionsResponse:
    properties:
      created_at:
        type: string
      permission_id:
        type: integer
      role_id:
        type: integer
    type: object
  role_permissions.RolepermissionsUpdateRequest:
    properties:
      permission_id:
        type: integer
      role_id:
        type: integer
    type: object
  roles.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  roles.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/roles.RolesResponse'
        type: array
      pagination:
        $ref: '#/definitions/roles.PaginationInfo'
    type: object
  roles.RolesCreateRequest:
    properties:
      description:
        type: string
      name:
        maxLength: 50
        type: string
    required:
    - name
    type: object
  roles.RolesResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  roles.RolesUpdateRequest:
    properties:
      description:
        type: string
      name:
        maxLength: 50
        type: string
    type: object
  sessions.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  sessions.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/sessions.SessionsResponse'
        type: array
      pagination:
        $ref: '#/definitions/sessions.PaginationInfo'
    type: object
  sessions.SessionsCreateRequest:
    properties:
      device_info:
        type: string
      expires_at:
        type: string
      ip_address:
        maxLength: 45
        type: string
      is_active:
        type: boolean
      last_used_at:
        type: string
      refresh_token:
        maxLength: 500
        type: string
      token:
        maxLength: 500
        type: string
      user_agent:
        type: string
      user_id:
        type: integer
    required:
    - expires_at
    - token
    - user_id
    type: object
  sessions.SessionsResponse:
    properties:
      created_at:
        type: string
      device_info:
        type: string
      expires_at:
        type: string
      id:
        type: integer
      ip_address:
        type: string
      is_active:
        type: boolean
      last_used_at:
        type: string
      refresh_token:
        type: string
      token:
        type: string
      user_agent:
        type: string
      user_id:
        type: integer
    type: object
  sessions.SessionsUpdateRequest:
    properties:
      device_info:
        type: string
      expires_at:
        type: string
      ip_address:
        maxLength: 45
        type: string
      is_active:
        type: boolean
      last_used_at:
        type: string
      refresh_token:
        maxLength: 500
        type: string
      token:
        maxLength: 500
        type: string
      user_agent:
        type: string
      user_id:
        type: integer
    type: object
  test_table.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  test_table.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/test_table.TesttableResponse'
        type: array
      pagination:
        $ref: '#/definitions/test_table.PaginationInfo'
    type: object
  test_table.TesttableCreateRequest:
    properties:
      family_name:
        type: string
      name:
        type: string
      preferences:
        type: string
      prefrence:
        type: string
    type: object
  test_table.TesttableResponse:
    properties:
      family_name:
        type: string
      id:
        type: integer
      name:
        type: string
      preferences:
        type: string
      prefrence:
        type: string
    type: object
  test_table.TesttableUpdateRequest:
    properties:
      family_name:
        type: string
      name:
        type: string
      preferences:
        type: string
      prefrence:
        type: string
    type: object
  user_2fa.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  user_2fa.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/user_2fa.User2faResponse'
        type: array
      pagination:
        $ref: '#/definitions/user_2fa.PaginationInfo'
    type: object
  user_2fa.User2faCreateRequest:
    properties:
      backup_codes:
        type: string
      enabled_at:
        type: string
      is_enabled:
        type: boolean
      last_used_at:
        type: string
      secret:
        maxLength: 255
        type: string
      user_id:
        type: integer
    required:
    - secret
    - user_id
    type: object
  user_2fa.User2faResponse:
    properties:
      backup_codes:
        type: string
      created_at:
        type: string
      enabled_at:
        type: string
      id:
        type: integer
      is_enabled:
        type: boolean
      last_used_at:
        type: string
      secret:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  user_2fa.User2faUpdateRequest:
    properties:
      backup_codes:
        type: string
      enabled_at:
        type: string
      is_enabled:
        type: boolean
      last_used_at:
        type: string
      secret:
        maxLength: 255
        type: string
      user_id:
        type: integer
    type: object
  user_roles.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  user_roles.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/user_roles.UserrolesResponse'
        type: array
      pagination:
        $ref: '#/definitions/user_roles.PaginationInfo'
    type: object
  user_roles.UserrolesCreateRequest:
    properties:
      assigned_at:
        type: string
      assigned_by:
        type: integer
      role_id:
        type: integer
      user_id:
        type: integer
    required:
    - role_id
    - user_id
    type: object
  user_roles.UserrolesResponse:
    properties:
      assigned_at:
        type: string
      assigned_by:
        type: integer
      role_id:
        type: integer
      user_id:
        type: integer
    type: object
  user_roles.UserrolesUpdateRequest:
    properties:
      assigned_at:
        type: string
      assigned_by:
        type: integer
      role_id:
        type: integer
      user_id:
        type: integer
    type: object
  users.PaginationInfo:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  users.PaginationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/users.UsersResponse'
        type: array
      pagination:
        $ref: '#/definitions/users.PaginationInfo'
    type: object
  users.UsersCreateRequest:
    properties:
      bio:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      email_verified_at:
        type: string
      failed_login_attempts:
        type: integer
      is_active:
        type: boolean
      is_admin:
        type: boolean
      last_login_at:
        type: string
      locked_until:
        type: string
      metadata:
        type: string
      name:
        type: string
      nickname:
        maxLength: 50
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  users.UsersResponse:
    properties:
      bio:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      email_verified_at:
        type: string
      failed_login_attempts:
        type: integer
      id:
        type: integer
      is_active:
        type: boolean
      is_admin:
        type: boolean
      last_login_at:
        type: string
      locked_until:
        type: string
      metadata:
        type: string
      name:
        type: string
      nickname:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
  users.UsersUpdateRequest:
    properties:
      bio:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      email_verified_at:
        type: string
      failed_login_attempts:
        type: integer
      is_active:
        type: boolean
      is_admin:
        type: boolean
      last_login_at:
        type: string
      locked_until:
        type: string
      metadata:
        type: string
      name:
        type: string
      nickname:
        maxLength: 50
        type: string
      password:
        type: string
    type: object
  utils.Response:
    properties:
      data: {}
      error:
        type: string
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A production-ready Gin backend template for mobile apps
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go Mobile Backend Template API
  version: "1.0"
paths:
  /admin/auto-registry/apis:
    get:
      consumes:
      - application/json
      description: Get the list of currently registered auto-generated APIs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get registered APIs
      tags:
      - admin
  /admin/auto-registry/regenerate:
    post:
      consumes:
      - application/json
      description: Manually trigger regeneration of all auto-generated APIs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Regenerate APIs
      tags:
      - admin
  /admin/auto-registry/status:
    get:
      consumes:
      - application/json
      description: Get the current status of the auto-registry system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get auto-registry status
      tags:
      - admin
  /admin/database/query:
    post:
      consumes:
      - application/json
      description: Execute a read-only SQL query
      parameters:
      - description: Query request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.ExecuteQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Execute SQL query (Admin)
      tags:
      - admin
  /admin/database/stats:
    get:
      consumes:
      - application/json
      description: Get overall database statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get database statistics (Admin)
      tags:
      - admin
  /admin/database/tables:
    get:
      consumes:
      - application/json
      description: Get list of all tables in the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: List all database tables (Admin)
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new table with specified columns
      parameters:
      - description: Table creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.CreateTableRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new database table (Admin)
      tags:
      - admin
  /admin/database/tables/{tableName}:
    delete:
      consumes:
      - application/json
      description: Delete a table from the database
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        type: string
      - description: Drop with CASCADE
        in: query
        name: cascade
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Drop table (Admin)
      tags:
      - admin
  /admin/database/tables/{tableName}/columns:
    post:
      consumes:
      - application/json
      description: Add a new column to an existing table
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        type: string
      - description: Add column request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AddColumnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add column to table (Admin)
      tags:
      - admin
  /admin/database/tables/{tableName}/columns/{columnName}:
    delete:
      consumes:
      - application/json
      description: Remove a column from an existing table
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        type: string
      - description: Column name
        in: path
        name: columnName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Drop column from table (Admin)
      tags:
      - admin
  /admin/database/tables/{tableName}/data:
    get:
      consumes:
      - application/json
      description: Get paginated data from a specific table
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get table data (Admin)
      tags:
      - admin
  /admin/database/tables/{tableName}/rename:
    put:
      consumes:
      - application/json
      description: Rename an existing table
      parameters:
      - description: Current table name
        in: path
        name: tableName
        required: true
        type: string
      - description: Rename request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.RenameTableRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Rename table (Admin)
      tags:
      - admin
  /admin/database/tables/{tableName}/rows:
    post:
      consumes:
      - application/json
      description: Insert a new row into the specified table
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        type: string
      - description: Row data
        in: body
        name: row
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      summary: Insert a row into a table
      tags:
      - Database
  /admin/database/tables/{tableName}/rows/{pkValue}:
    delete:
      consumes:
      - application/json
      description: Delete an existing row from the specified table
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        type: string
      - description: Primary key value
        in: path
        name: pkValue
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Delete a row from a table
      tags:
      - Database
    put:
      consumes:
      - application/json
      description: Update an existing row in the specified table
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        type: string
      - description: Primary key value
        in: path
        name: pkValue
        required: true
        type: string
      - description: Row data
        in: body
        name: row
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Update a row in a table
      tags:
      - Database
  /admin/database/tables/{tableName}/schema:
    get:
      consumes:
      - application/json
      description: Get column information for a specific table
      parameters:
      - description: Table name
        in: path
        name: tableName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get table schema (Admin)
      tags:
      - admin
  /admin/permissions:
    get:
      consumes:
      - application/json
      description: Get list of all available permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: List all permissions (Admin)
      tags:
      - admin
  /admin/roles:
    get:
      consumes:
      - application/json
      description: Get list of all roles with permissions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: List all roles (Admin)
      tags:
      - admin
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: Role creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create new role (Admin)
      tags:
      - admin
  /admin/roles/{id}:
    get:
      consumes:
      - application/json
      description: Get role with permissions
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get role details (Admin)
      tags:
      - admin
  /admin/roles/{id}/permissions:
    post:
      consumes:
      - application/json
      description: Assign multiple permissions to a role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permissions request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AssignPermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Assign permissions to role (Admin)
      tags:
      - admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get paginated list of all users with their roles
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Search by email or name
        in: query
        name: search
        type: string
      - description: Filter by role name
        in: query
        name: role
        type: string
      - description: Filter by active status
        in: query
        name: is_active
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: List all users (Admin)
      tags:
      - admin
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete user (Admin)
      tags:
      - admin
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get user details (Admin)
      tags:
      - admin
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update user (Admin)
      tags:
      - admin
  /admin/users/{id}/roles:
    post:
      consumes:
      - application/json
      description: Assign a role to a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role assignment request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/admin.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Assign role to user (Admin)
      tags:
      - admin
  /admin/users/{id}/roles/{roleId}:
    delete:
      consumes:
      - application/json
      description: Remove a role from a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role ID
        in: path
        name: roleId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Remove role from user (Admin)
      tags:
      - admin
  /api_keys:
    get:
      consumes:
      - application/json
      description: Get all api_keyss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_keys.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all api_keyss
      tags:
      - api_keys
    post:
      consumes:
      - application/json
      description: Create a new api_keys record
      parameters:
      - description: Create api_keys request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_keys.ApikeysCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api_keys.ApikeysResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create api_keys
      tags:
      - api_keys
  /api_keys/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a api_keys by ID
      parameters:
      - description: api_keys ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete api_keys
      tags:
      - api_keys
    get:
      consumes:
      - application/json
      description: Get a api_keys by ID
      parameters:
      - description: api_keys ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_keys.ApikeysResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get api_keys
      tags:
      - api_keys
    put:
      consumes:
      - application/json
      description: Update a api_keys by ID
      parameters:
      - description: api_keys ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update api_keys request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api_keys.ApikeysUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api_keys.ApikeysResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update api_keys
      tags:
      - api_keys
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return tokens
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Revoke user's refresh tokens
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Refresh access token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account
      parameters:
      - description: Registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/auth.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Register a new user
      tags:
      - auth
  /auth/validate:
    get:
      description: Validate if the current access token is valid
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Validate access token
      tags:
      - auth
  /email_verification_tokens:
    get:
      consumes:
      - application/json
      description: Get all email_verification_tokenss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/email_verification_tokens.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all email_verification_tokenss
      tags:
      - email_verification_tokens
    post:
      consumes:
      - application/json
      description: Create a new email_verification_tokens record
      parameters:
      - description: Create email_verification_tokens request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/email_verification_tokens.EmailverificationtokensCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/email_verification_tokens.EmailverificationtokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create email_verification_tokens
      tags:
      - email_verification_tokens
  /email_verification_tokens/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a email_verification_tokens by ID
      parameters:
      - description: email_verification_tokens ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete email_verification_tokens
      tags:
      - email_verification_tokens
    get:
      consumes:
      - application/json
      description: Get a email_verification_tokens by ID
      parameters:
      - description: email_verification_tokens ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/email_verification_tokens.EmailverificationtokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get email_verification_tokens
      tags:
      - email_verification_tokens
    put:
      consumes:
      - application/json
      description: Update a email_verification_tokens by ID
      parameters:
      - description: email_verification_tokens ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update email_verification_tokens request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/email_verification_tokens.EmailverificationtokensUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/email_verification_tokens.EmailverificationtokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update email_verification_tokens
      tags:
      - email_verification_tokens
  /files:
    get:
      consumes:
      - application/json
      description: Get all filess with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/files.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all filess
      tags:
      - files
    post:
      consumes:
      - application/json
      description: Create a new files record
      parameters:
      - description: Create files request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/files.FilesCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/files.FilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create files
      tags:
      - files
  /files/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a files by ID
      parameters:
      - description: files ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete files
      tags:
      - files
    get:
      consumes:
      - application/json
      description: Get a files by ID
      parameters:
      - description: files ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/files.FilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get files
      tags:
      - files
    put:
      consumes:
      - application/json
      description: Update a files by ID
      parameters:
      - description: files ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update files request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/files.FilesUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/files.FilesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update files
      tags:
      - files
  /oauth_providers:
    get:
      consumes:
      - application/json
      description: Get all oauth_providerss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauth_providers.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all oauth_providerss
      tags:
      - oauth_providers
    post:
      consumes:
      - application/json
      description: Create a new oauth_providers record
      parameters:
      - description: Create oauth_providers request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/oauth_providers.OauthprovidersCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/oauth_providers.OauthprovidersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create oauth_providers
      tags:
      - oauth_providers
  /oauth_providers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a oauth_providers by ID
      parameters:
      - description: oauth_providers ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete oauth_providers
      tags:
      - oauth_providers
    get:
      consumes:
      - application/json
      description: Get a oauth_providers by ID
      parameters:
      - description: oauth_providers ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauth_providers.OauthprovidersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get oauth_providers
      tags:
      - oauth_providers
    put:
      consumes:
      - application/json
      description: Update a oauth_providers by ID
      parameters:
      - description: oauth_providers ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update oauth_providers request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/oauth_providers.OauthprovidersUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauth_providers.OauthprovidersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update oauth_providers
      tags:
      - oauth_providers
  /password_reset_tokens:
    get:
      consumes:
      - application/json
      description: Get all password_reset_tokenss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/password_reset_tokens.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all password_reset_tokenss
      tags:
      - password_reset_tokens
    post:
      consumes:
      - application/json
      description: Create a new password_reset_tokens record
      parameters:
      - description: Create password_reset_tokens request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/password_reset_tokens.PasswordresettokensCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/password_reset_tokens.PasswordresettokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create password_reset_tokens
      tags:
      - password_reset_tokens
  /password_reset_tokens/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a password_reset_tokens by ID
      parameters:
      - description: password_reset_tokens ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete password_reset_tokens
      tags:
      - password_reset_tokens
    get:
      consumes:
      - application/json
      description: Get a password_reset_tokens by ID
      parameters:
      - description: password_reset_tokens ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/password_reset_tokens.PasswordresettokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get password_reset_tokens
      tags:
      - password_reset_tokens
    put:
      consumes:
      - application/json
      description: Update a password_reset_tokens by ID
      parameters:
      - description: password_reset_tokens ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update password_reset_tokens request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/password_reset_tokens.PasswordresettokensUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/password_reset_tokens.PasswordresettokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update password_reset_tokens
      tags:
      - password_reset_tokens
  /permissions:
    get:
      consumes:
      - application/json
      description: Get all permissionss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all permissionss
      tags:
      - permissions
    post:
      consumes:
      - application/json
      description: Create a new permissions record
      parameters:
      - description: Create permissions request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permissions.PermissionsCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/permissions.PermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create permissions
      tags:
      - permissions
  /permissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a permissions by ID
      parameters:
      - description: permissions ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete permissions
      tags:
      - permissions
    get:
      consumes:
      - application/json
      description: Get a permissions by ID
      parameters:
      - description: permissions ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.PermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get permissions
      tags:
      - permissions
    put:
      consumes:
      - application/json
      description: Update a permissions by ID
      parameters:
      - description: permissions ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update permissions request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/permissions.PermissionsUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.PermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update permissions
      tags:
      - permissions
  /realtime/broadcast:
    post:
      consumes:
      - application/json
      description: Send a message to a channel or all users
      parameters:
      - description: Broadcast request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/realtime.BroadcastRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Broadcast a message
      tags:
      - realtime
  /realtime/presence:
    get:
      consumes:
      - application/json
      description: Get online presence for all users or a specific user
      parameters:
      - description: User ID to get presence for
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get presence information
      tags:
      - realtime
  /realtime/stats:
    get:
      consumes:
      - application/json
      description: Get statistics about connected clients and channels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get real-time statistics
      tags:
      - realtime
  /realtime/ws:
    get:
      consumes:
      - application/json
      description: Establish WebSocket connection for real-time features
      parameters:
      - description: JWT token for authentication
        in: query
        name: token
        required: true
        type: string
      - description: Channel to subscribe to
        in: query
        name: channel
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
      summary: WebSocket connection endpoint
      tags:
      - realtime
  /refresh_tokens:
    get:
      consumes:
      - application/json
      description: Get all refresh_tokenss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/refresh_tokens.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all refresh_tokenss
      tags:
      - refresh_tokens
    post:
      consumes:
      - application/json
      description: Create a new refresh_tokens record
      parameters:
      - description: Create refresh_tokens request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/refresh_tokens.RefreshtokensCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/refresh_tokens.RefreshtokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create refresh_tokens
      tags:
      - refresh_tokens
  /refresh_tokens/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a refresh_tokens by ID
      parameters:
      - description: refresh_tokens ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete refresh_tokens
      tags:
      - refresh_tokens
    get:
      consumes:
      - application/json
      description: Get a refresh_tokens by ID
      parameters:
      - description: refresh_tokens ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/refresh_tokens.RefreshtokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get refresh_tokens
      tags:
      - refresh_tokens
    put:
      consumes:
      - application/json
      description: Update a refresh_tokens by ID
      parameters:
      - description: refresh_tokens ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update refresh_tokens request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/refresh_tokens.RefreshtokensUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/refresh_tokens.RefreshtokensResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update refresh_tokens
      tags:
      - refresh_tokens
  /role_permissions:
    get:
      consumes:
      - application/json
      description: Get all role_permissionss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role_permissions.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all role_permissionss
      tags:
      - role_permissions
    post:
      consumes:
      - application/json
      description: Create a new role_permissions record
      parameters:
      - description: Create role_permissions request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role_permissions.RolepermissionsCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/role_permissions.RolepermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create role_permissions
      tags:
      - role_permissions
  /role_permissions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a role_permissions by ID
      parameters:
      - description: role_permissions ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete role_permissions
      tags:
      - role_permissions
    get:
      consumes:
      - application/json
      description: Get a role_permissions by ID
      parameters:
      - description: role_permissions ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role_permissions.RolepermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get role_permissions
      tags:
      - role_permissions
    put:
      consumes:
      - application/json
      description: Update a role_permissions by ID
      parameters:
      - description: role_permissions ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update role_permissions request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/role_permissions.RolepermissionsUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/role_permissions.RolepermissionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update role_permissions
      tags:
      - role_permissions
  /roles:
    get:
      consumes:
      - application/json
      description: Get all roless with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all roless
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Create a new roles record
      parameters:
      - description: Create roles request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/roles.RolesCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/roles.RolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create roles
      tags:
      - roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a roles by ID
      parameters:
      - description: roles ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete roles
      tags:
      - roles
    get:
      consumes:
      - application/json
      description: Get a roles by ID
      parameters:
      - description: roles ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.RolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get roles
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Update a roles by ID
      parameters:
      - description: roles ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update roles request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/roles.RolesUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/roles.RolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update roles
      tags:
      - roles
  /sessions:
    get:
      consumes:
      - application/json
      description: Get all sessionss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sessions.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all sessionss
      tags:
      - sessions
    post:
      consumes:
      - application/json
      description: Create a new sessions record
      parameters:
      - description: Create sessions request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sessions.SessionsCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/sessions.SessionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create sessions
      tags:
      - sessions
  /sessions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a sessions by ID
      parameters:
      - description: sessions ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete sessions
      tags:
      - sessions
    get:
      consumes:
      - application/json
      description: Get a sessions by ID
      parameters:
      - description: sessions ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sessions.SessionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get sessions
      tags:
      - sessions
    put:
      consumes:
      - application/json
      description: Update a sessions by ID
      parameters:
      - description: sessions ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update sessions request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/sessions.SessionsUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/sessions.SessionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update sessions
      tags:
      - sessions
  /test_table:
    get:
      consumes:
      - application/json
      description: Get all test_tables with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/test_table.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all test_tables
      tags:
      - test_table
    post:
      consumes:
      - application/json
      description: Create a new test_table record
      parameters:
      - description: Create test_table request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/test_table.TesttableCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/test_table.TesttableResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create test_table
      tags:
      - test_table
  /test_table/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a test_table by ID
      parameters:
      - description: test_table ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete test_table
      tags:
      - test_table
    get:
      consumes:
      - application/json
      description: Get a test_table by ID
      parameters:
      - description: test_table ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/test_table.TesttableResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get test_table
      tags:
      - test_table
    put:
      consumes:
      - application/json
      description: Update a test_table by ID
      parameters:
      - description: test_table ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update test_table request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/test_table.TesttableUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/test_table.TesttableResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update test_table
      tags:
      - test_table
  /user_2fa:
    get:
      consumes:
      - application/json
      description: Get all user_2fas with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_2fa.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all user_2fas
      tags:
      - user_2fa
    post:
      consumes:
      - application/json
      description: Create a new user_2fa record
      parameters:
      - description: Create user_2fa request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user_2fa.User2faCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user_2fa.User2faResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create user_2fa
      tags:
      - user_2fa
  /user_2fa/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user_2fa by ID
      parameters:
      - description: user_2fa ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete user_2fa
      tags:
      - user_2fa
    get:
      consumes:
      - application/json
      description: Get a user_2fa by ID
      parameters:
      - description: user_2fa ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_2fa.User2faResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get user_2fa
      tags:
      - user_2fa
    put:
      consumes:
      - application/json
      description: Update a user_2fa by ID
      parameters:
      - description: user_2fa ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user_2fa request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user_2fa.User2faUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_2fa.User2faResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update user_2fa
      tags:
      - user_2fa
  /user_roles:
    get:
      consumes:
      - application/json
      description: Get all user_roless with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_roles.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all user_roless
      tags:
      - user_roles
    post:
      consumes:
      - application/json
      description: Create a new user_roles record
      parameters:
      - description: Create user_roles request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user_roles.UserrolesCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user_roles.UserrolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create user_roles
      tags:
      - user_roles
  /user_roles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user_roles by ID
      parameters:
      - description: user_roles ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete user_roles
      tags:
      - user_roles
    get:
      consumes:
      - application/json
      description: Get a user_roles by ID
      parameters:
      - description: user_roles ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_roles.UserrolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get user_roles
      tags:
      - user_roles
    put:
      consumes:
      - application/json
      description: Update a user_roles by ID
      parameters:
      - description: user_roles ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user_roles request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user_roles.UserrolesUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user_roles.UserrolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update user_roles
      tags:
      - user_roles
  /users:
    get:
      consumes:
      - application/json
      description: Get all userss with pagination
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.PaginationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get all userss
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new users record
      parameters:
      - description: Create users request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.UsersCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Create users
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a users by ID
      parameters:
      - description: users ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Delete users
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a users by ID
      parameters:
      - description: users ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Get users
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a users by ID
      parameters:
      - description: users ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update users request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.UsersUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
      security:
      - BearerAuth: []
      summary: Update users
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
